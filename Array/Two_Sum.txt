1. Two Sum:

Q) Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

***************************************
Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109

********************************************
Sol) BruteForce:(C++)

//create 2 for loop, and check whose sum is equal to the target

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       vector<int> v;
       bool flag=false;
       for(int i=0;i<nums.size();i++){
           for(int j=i+1;j<nums.size();j++){
               if(nums[i]+nums[j]==target){
                   v.push_back(i);
                   v.push_back(j);
                   return v;
               }
           }
       }
    return v;
    }
};
************************************************

Sol2): Optimised: (JAVA)

//Create a mp, whose key is the diff of target and arr[i] and value is the index:

	Map<Integer, Integer> mp=new HashMap();
	int[] arr=new int[2];

	for(int i=0;i<nums.length;i++){
		if(mp.containsKey(target-nums[i])){
			return new int[] {mp.get(target-nums[i]),i};
		}else{
			mp.put(nums[i],i);
		}
	} 
	return new int[]  {-1,-1};